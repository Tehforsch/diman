use crate as diman;
use crate::unit_system;

unit_system!(
    quantity_type Quantity,
    dimension_type Dimension,
    dimension Length,
    dimension Time,
    dimension Mass,
    dimension Temperature,
    dimension Current,
    dimension AmountOfSubstance,
    dimension LuminousIntensity,
    dimension Dimensionless = 1,
    unit dimensionless: Dimensionless,
    unit (meters, "m"): Length,
    unit (kilometers, "km") = 1000.0 * meters,
    unit (seconds, "s"): Time,
    unit (hours, "h") = 3600 * seconds,
    dimension Velocity = Length / Time,
    unit (meters_per_second, "m/s") = meters / seconds,
    dimension Area = Length * Length,
    unit (square_meters, "m^2") = meters^2,
    dimension Volume = Length^3,
    unit (cubic_meters, "m^3") = meters^3,
    unit (kilograms, "kg"): Mass,
    unit (grams, "g") = 1e-3 * kilograms,
    dimension MassDensity = Mass / Volume,
    unit (kilograms_per_cubic_meter, "kg/m^3") = kilograms / cubic_meters,
    dimension Momentum = Mass * Velocity,
    unit (kilograms_meter_per_second, "kg m/s") = kilograms / square_meters,
    dimension MomentumDensity = Momentum / Volume,
    unit (kilograms_per_meter_squared_second, "kg/(m^2 s)") = kilograms / (square_meters * seconds),
    dimension Force = Mass * Velocity / Time,
    unit (newtons, "kg m/s^2") = kilograms * meters / (seconds^2),
    dimension Pressure = Force / Area,
    unit (pascals, "Pa") = newtons / square_meters,
    unit (kelvin, "K"): Temperature,
    dimension Energy = Force * Length,
    unit (joules, "J") = newtons * meters,
    dimension SpecificEnergy = Energy / Mass,
    unit (joules_per_kilogram, "J/kg") = joules / kilograms,
    dimension SpecificHeatCapacity = SpecificEnergy / Temperature,
    unit (joules_per_kilogram_kelvin, "J/kg/K") = joules_per_kilogram / kelvin,
    dimension EnergyDensity = Energy / Volume,
    unit (joules_per_cubic_meter, "J/m^3") = joules / cubic_meters,
    dimension Power = Energy / Time,
    unit (watts, "W") = joules / seconds,
    dimension MassFlux = Mass / (Area * Time),
    unit (kilograms_per_square_meter_second, "kg/(m^2 s)") = kilograms / square_meters / seconds,
    dimension EnergyFlux = Power / Area,
    unit (watts_per_square_meter, "W/m^2") = watts / square_meters,
    dimension DynamicViscosity = Pressure / Time,
    unit (pascal_seconds, "Pa s") = pascals * seconds,
    dimension KinematicViscosity = Area / Time,
    unit (square_meters_per_second, "m^2/s") = square_meters / seconds,
);
