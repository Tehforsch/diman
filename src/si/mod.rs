use crate as diman;
use crate::dimension;
use crate::unit_system;

#[dimension]
pub struct Dimension {
    pub length: i32,
    pub time: i32,
    pub mass: i32,
    pub temperature: i32,
    pub current: i32,
    pub amount_of_substance: i32,
    pub luminous_intensity: i32,
}

unit_system!(
    Quantity,
    Dimension,
    [
        def Dimensionless = {},
        unit dimensionless = Dimensionless,
        def Length = { length: 1 },
        unit (meters, "m") = Length,
        unit (kilometers, "km") = 1000.0 * meters,
        def Time = { time: 1 },
        unit (seconds, "s") = Time,
        unit (hours, "h") = 3600 * seconds,
        def Velocity = Length / Time,
        unit (meters_per_second, "m/s") = meters / seconds,
        def Area = Length * Length,
        unit (square_meters, "m^2") = meters^2,
        def Volume = Length^3,
        unit (cubic_meters, "m^3") = meters^3,
        def Mass = { mass: 1 },
        unit (kilograms, "kg") = Mass,
        unit (grams, "g") = 1e-3 * kilograms,
        def MassDensity = Mass / Volume,
        unit (kilograms_per_cubic_meter, "kg/m^3") = kilograms / cubic_meters,
        def Momentum = Mass * Velocity,
        unit (kilograms_meter_per_second, "kg m/s") = kilograms / square_meters,
        def MomentumDensity = Momentum / Volume,
        unit (kilograms_per_meter_squared_second, "kg/(m^2 s)") = kilograms / (square_meters * seconds),
        def Force = Mass * Velocity / Time,
        unit (newtons, "kg m/s^2") = kilograms * meters / (seconds^2),
        def Pressure = Force / Area,
        unit (pascals, "Pa") = newtons / square_meters,
        def Temperature = { temperature: 1 },
        unit (kelvin, "K") = Temperature,
        def Energy = Force * Length,
        unit (joules, "J") = newtons * meters,
        def SpecificEnergy = Energy / Mass,
        unit (joules_per_kilogram, "J/kg") = joules / kilograms,
        def SpecificHeatCapacity = SpecificEnergy / Temperature,
        unit (joules_per_kilogram_kelvin, "J/kg/K") = joules_per_kilogram / kelvin,
        def EnergyDensity = Energy / Volume,
        unit (joules_per_cubic_meter, "J/m^3") = joules / cubic_meters,
        def Power = Energy / Time,
        unit (watts, "W") = joules / seconds,
        def MassFlux = Mass / (Area * Time),
        unit (kilograms_per_square_meter_second, "kg/(m^2 s)") = kilograms / square_meters / seconds,
        def EnergyFlux = Power / Area,
        unit (watts_per_square_meter, "W/m^2") = watts / square_meters,
        def DynamicViscosity = Pressure / Time,
        unit (pascal_seconds, "Pa s") = pascals * seconds,
        def KinematicViscosity = Area / Time,
        unit (square_meters_per_second, "m^2/s") = square_meters / seconds,
    ]
);
